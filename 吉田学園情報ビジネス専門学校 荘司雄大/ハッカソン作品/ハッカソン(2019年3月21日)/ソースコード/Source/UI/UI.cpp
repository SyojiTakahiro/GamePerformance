//*****************************************************************************
//
//     UIの処理[ui.h]
//     Auther:Hodaka Niwa
//
//*****************************************************************************
#include "ui.h"
#include "textureManager.h"
#include "manager.h"

//*****************************************************************************
//    マクロ定義
//*****************************************************************************
// データ入力用マクロ
#define UI_NUM                 (8)                                          // 表示するUIオブジェクトの数
#define UI_ADD_ALPHA           (1.0f)                                       // UIの透明度を下げる値
#define UI_CUT_ALPHA           (0.08f)                                      // UIの透明度を上げる値

//*****************************************************************************
//    静的メンバ変数宣言
//*****************************************************************************

//=============================================================================
//    コンストラクタ
//=============================================================================
CUI::CUI()
{
	// 各種値のクリア
	m_State = STATE_NORMAL;    // 状態
	m_pTextureManager = NULL;  // テクスチャ管轄クラスへのポインタ
	m_bDisp = true;            // UIを描画するかどうか
}

//=============================================================================
//    デストラクタ
//=============================================================================
CUI::~CUI()
{

}

//=============================================================================
//    生成処理
//=============================================================================
CUI *CUI::Create(CTextureManager *pTextureManager)
{
	CUI *pUi = NULL;  // UIクラス型のポインタ
	if (pUi == NULL)
	{// メモリが確保できる状態にある
		pUi = new CUI;
		if (pUi != NULL)
		{// メモリが確保できた
		    // 初期化処理を行う
			pUi->Init(pTextureManager);
		}
		else
		{// メモリが確保できなかった
			return NULL;
		}
	}
	else
	{// メモリが確保できる状態にない
		return NULL;
	}

	// インスタンスを返す
	return pUi;
}

//=============================================================================
//    初期化処理
//=============================================================================
HRESULT CUI::Init(CTextureManager *pTextureManager)
{
	// 必要なUIを生成する

	// テクスチャ管轄クラスへのポインタを保存しておく
	m_pTextureManager = pTextureManager;

	return S_OK;
}

//=============================================================================
//    終了処理
//=============================================================================
void CUI::Uninit(void)
{
	// テクスチャ管轄クラスへのポインタを空にする
	m_pTextureManager = NULL;
}

//=============================================================================
//    更新処理
//=============================================================================
void CUI::Update(void)
{
	if (m_State == STATE_ALPHACHANGE)
	{// 透明度を変更する状態ならば
	    // 透明度を変更する
		int nCntOk = 0;
		D3DXCOLOR col;
		float fValue;

		if (m_bDisp != true)
		{// 描画しない状態ならば
		    // 透明度を0にしていく
			fValue = -UI_ADD_ALPHA;


		}
		else if (m_bDisp == true)
		{// 描画する状態ならば
		    // 透明度を1にしていく
			fValue = UI_CUT_ALPHA;
		}

		if (nCntOk == UI_NUM)
		{// 全ての透明度が変更されている
			m_State = STATE_NORMAL;
		}
	}
}

//=============================================================================
//    UIを描画するかどうかを設定する処理
//=============================================================================
void CUI::SetDisp(const bool bDisp)
{
	m_bDisp = bDisp;
	m_State = STATE_ALPHACHANGE;
}

//=============================================================================
//    UIを描画するかどうかを取得する処理
//=============================================================================
bool CUI::GetDisp(void)
{
	return m_bDisp;
}