//*****************************************************************************
//
//     キャラクターの処理[character.cpp]
//     Auther:Hodaka Niwa
//
//*****************************************************************************
#include "character.h"
#include "manager.h"
#include "renderer.h"
#include "model.h"
#include "motion.h"
#include "modelManager.h"
#include "textureManager.h"

//*****************************************************************************
//    マクロ宣言
//*****************************************************************************

//*****************************************************************************
//    静的メンバ変数宣言
//*****************************************************************************

//=============================================================================
//    コンストラクタ
//=============================================================================
CCharacter::CCharacter(int nPriority, OBJTYPE objType) : CScene(nPriority, objType)
{
	// 各種値の設定
	m_apModel = NULL;                                      // モデルクラスへのポインタ
	m_nNumParts = 0;                                       // 使用するパーツ数
	m_pMotionManager = NULL;                               // モーションクラスへのポインタ
	m_pTextureManager = NULL;                              // テクスチャ管轄クラスへのポインタ
	D3DXMatrixIdentity(&m_MtxWorld);                       // ワールドマトリックス
	m_Pos = D3DXVECTOR3(0.0f, 0.0f, 0.0f);                 // 現在の座標
	m_PosOld = D3DXVECTOR3(0.0f, 0.0f, 0.0f);              // 前回の座標
	m_Rot = D3DXVECTOR3(0.0f, 0.0f, 0.0f);                 // 現在の向き
	m_DestRot = D3DXVECTOR3(0.0f, 0.0f, 0.0f);             // 目的の向き
	m_DiffRot = D3DXVECTOR3(0.0f, 0.0f, 0.0f);             // 目的の向きと現在の向きの差分
	m_fGravity = 0.0f;                                     // 重力
	m_fColHeight = 0.0f;                                   // 当たり判定をとる高さ
	m_fColRange = 0.0f;                                    // 当たり判定を取る範囲
	m_pLandScene = NULL;                                   // 乗っているオブジェクトへのポインタ
	m_bLand = false;                                       // 前回オブジェクトに乗っていたかどうか
	m_LandOffsetPos = D3DXVECTOR3(0.0f, 0.0f, 0.0f);       // オブジェクトからのオフセット距離
	m_LandOffsetAdd = D3DXVECTOR3(0.0f, 0.0f, 0.0f);       // オフセット距離に加える値
	m_LandOffsetRot = D3DXVECTOR3(0.0f, 0.0f, 0.0f);       // オブジェクトからのオフセット向き
	m_LandOffsetRotStart = D3DXVECTOR3(0.0f, 0.0f, 0.0f);  // 乗ってからの向き
}

//=============================================================================
//    デストラクタ
//=============================================================================
CCharacter::~CCharacter()
{

}

//=============================================================================
//    初期化処理
//=============================================================================
HRESULT CCharacter::Init(void)
{
	return S_OK;
}

//=============================================================================
//    終了処理
//=============================================================================
void CCharacter::Uninit(void)
{
	// モデルの破棄
	if (m_apModel != NULL)
	{// メモリが確保されている
		for (int nCntModel = 0; nCntModel < m_nNumParts; nCntModel++)
		{// 使用できるモデル数分繰り返し
			if (m_apModel[nCntModel] != NULL)
			{// ポインタが確保されている
				m_apModel[nCntModel]->Uninit();

				// メモリの開放
				delete m_apModel[nCntModel];
				m_apModel[nCntModel] = NULL;
			}
		}
		// メモリの開放
		delete[] m_apModel;
		m_apModel = NULL;
	}

	// モーションの破棄
	if (m_pMotionManager != NULL)
	{// ポインタが確保されている
		m_pMotionManager->Uninit();

		// メモリの開放
		delete m_pMotionManager;
		m_pMotionManager = NULL;
	}

	// 乗っているオブジェクトへのポインタを空にする
	if (m_pLandScene != NULL)
	{// ポインタが空ではない
		m_pLandScene = NULL;
	}

	// キャラクターオブジェクトの破棄
	Release();
}

//=============================================================================
//    更新処理
//=============================================================================
void CCharacter::Update(void)
{

}

//=============================================================================
//    描画処理
//=============================================================================
void CCharacter::Draw(void)
{
	// レンダリングクラス型のポインタ
	CRenderer *pRenderer = CManager::GetRenderer();

	if (pRenderer != NULL)
	{// レンダリングクラスが生成されている
	    // デバイスの取得
		LPDIRECT3DDEVICE9 pDevice = pRenderer->GetDevice();
		if (pDevice != NULL)
		{// デバイスが取得できた
		    // プレイヤーのワールドマトリックス計算処理
			SetMtxWorld(pDevice);

			if (m_apModel != NULL)
			{// メモリが確保できた
			    // モデルの描画
				for (int nCntModel = 0; nCntModel < m_nNumParts; nCntModel++)
				{// モデルを生成する数だけ繰り返し
				    // モデルの描画処理
					m_apModel[nCntModel]->Draw();
				}
			}
		}
	}
}

//=============================================================================
//    描画デバイスにワールドマトリックス設定する処理
//=============================================================================
void CCharacter::SetMtxWorld(LPDIRECT3DDEVICE9 pDevice)
{
	D3DXMATRIX mtxRot, mtxTrans; // 計算用マトリックス

	// ワールドマトリックスの初期化
	D3DXMatrixIdentity(&m_MtxWorld);

	// 回転を反映
	D3DXMatrixRotationYawPitchRoll(&mtxRot, m_Rot.y, m_Rot.x, m_Rot.z);
	D3DXMatrixMultiply(&m_MtxWorld, &m_MtxWorld, &mtxRot);

	// 位置を反映
	D3DXMatrixTranslation(&mtxTrans, m_Pos.x, m_Pos.y, m_Pos.z);
	D3DXMatrixMultiply(&m_MtxWorld, &m_MtxWorld, &mtxTrans);

	// ワールドマトリックスの設定
	pDevice->SetTransform(D3DTS_WORLD, &m_MtxWorld);
}

//=============================================================================
//    使用しているパーツ数を設定する
//=============================================================================
void CCharacter::SetNumParts(const int nNumParts)
{
	m_nNumParts = nNumParts;
}

//=============================================================================
//    モデルへのポインタを設定する
//=============================================================================
void CCharacter::SetModel(CModel **pModel)
{
	m_apModel = pModel;
}

//=============================================================================
//    モデルへのポインタを設定する
//=============================================================================
void CCharacter::SetModel(CModel *pModel, const int nIdx)
{
	m_apModel[nIdx] = pModel;
}

//=============================================================================
//    モーションへのポインタを設定する
//=============================================================================
void CCharacter::SetMotionManager(CMotionManager *pMotionManager)
{
	m_pMotionManager = pMotionManager;
}

//=============================================================================
//    テクスチャ管轄クラスへのポインタを設定する
//=============================================================================
void CCharacter::SetTextureManager(CTextureManager *pTextureManager)
{
	m_pTextureManager = pTextureManager;
}

//=============================================================================
//    ワールドマトリックスを設定する
//=============================================================================
void CCharacter::SetMtxWorld(const D3DXMATRIX mtxWorld)
{
	m_MtxWorld = mtxWorld;
}

//=============================================================================
//    現在の座標を設定する
//=============================================================================
void CCharacter::SetPos(const D3DXVECTOR3 pos)
{
	m_Pos = pos;
}

//=============================================================================
//    前回の座標を設定する
//=============================================================================
void CCharacter::SetPosOld(const D3DXVECTOR3 posOld)
{
	m_PosOld = posOld;
}

//=============================================================================
//    現在の向きを設定する
//=============================================================================
void CCharacter::SetRot(const D3DXVECTOR3 rot)
{
	m_Rot = rot;
}

//=============================================================================
//    目的の向きを設定する
//=============================================================================
void CCharacter::SetDestRot(const D3DXVECTOR3 Destrot)
{
	m_DestRot = Destrot;
}

//=============================================================================
//    目的の向きと現在の向きとの差分を設定する
//=============================================================================
void CCharacter::SetDiffRot(const D3DXVECTOR3 Diffrot)
{
	m_DiffRot = Diffrot;
}

//=============================================================================
//    重力を設定する
//=============================================================================
void CCharacter::SetGravity(const float fGravity)
{
	m_fGravity = fGravity;
}

//=============================================================================
//    当たり判定を取る高さを設定する
//=============================================================================
void CCharacter::SetColHeight(const float fColHeight)
{
	m_fColHeight = fColHeight;
}

//=============================================================================
//    当たり判定を取る範囲を設定する
//=============================================================================
void CCharacter::SetColRange(const float fColRange)
{
	m_fColRange = fColRange;
}

//=============================================================================
//    前回乗っていたかどうかを設定する
//=============================================================================
void CCharacter::SetLand(const bool bLand)
{
	m_bLand = bLand;
}

//=============================================================================
//    乗っているオブジェクトへのポインタを設定する
//=============================================================================
void CCharacter::SetLandScene(CScene *pLandScene)
{
	m_pLandScene = pLandScene;
}

//=============================================================================
//    乗っているオブジェクトとのオフセット距離を設定する
//=============================================================================
void CCharacter::SetLandOffsetPos(const D3DXVECTOR3 LandOffsetPos)
{
	m_LandOffsetPos = LandOffsetPos;
}

//=============================================================================
//    オフセット距離に加える値を設定する
//=============================================================================
void CCharacter::SetLandOffsetAdd(const D3DXVECTOR3 LandOffsetAdd)
{
	m_LandOffsetAdd = LandOffsetAdd;
}

//=============================================================================
//    乗っているオブジェクトとのオフセット向きを設定する
//=============================================================================
void CCharacter::SetLandOffsetRot(const D3DXVECTOR3 LandOffsetRot)
{
	m_LandOffsetRot = LandOffsetRot;
}

//=============================================================================
//    乗ってからの向きを設定する
//=============================================================================
void CCharacter::SetLandOffsetRotStart(const D3DXVECTOR3 LandOffsetRotStart)
{
	m_LandOffsetRotStart = LandOffsetRotStart;
}

//=============================================================================
//    使用しているパーツ数を取得する
//=============================================================================
int CCharacter::GetNumParts(void)
{
	return m_nNumParts;
}

//=============================================================================
//    モデルへのポインタを取得する
//=============================================================================
CModel **CCharacter::GetModel(void)
{
	return m_apModel;
}

//=============================================================================
//    モデルへのポインタを取得する
//=============================================================================
CModel *CCharacter::GetModel(const int nIdx)
{
	return m_apModel[nIdx];
}

//=============================================================================
//    モーションクラスへのポインタを取得する
//=============================================================================
CMotionManager *CCharacter::GetMotionManager(void)
{
	return m_pMotionManager;
}

//=============================================================================
//    テクスチャ管轄クラスへのポインタを取得する
//=============================================================================
CTextureManager *CCharacter::GetTextureManager(void)
{
	return m_pTextureManager;
}

//=============================================================================
//    ワールドマトリックスを取得する
//=============================================================================
D3DXMATRIX CCharacter::GetMtxWorld(void)
{
	return m_MtxWorld;
}

//=============================================================================
//    現在の座標を取得する
//=============================================================================
D3DXVECTOR3 CCharacter::GetPos(void)
{
	return m_Pos;
}

//=============================================================================
//    前回の座標を取得する
//=============================================================================
D3DXVECTOR3 CCharacter::GetPosOld(void)
{
	return m_PosOld;
}

//=============================================================================
//    現在の向きを取得する
//=============================================================================
D3DXVECTOR3 CCharacter::GetRot(void)
{
	return m_Rot;
}

//=============================================================================
//    目的の向きを取得する
//=============================================================================
D3DXVECTOR3 CCharacter::GetDestRot(void)
{
	return m_DestRot;
}

//=============================================================================
//    目的の向きと現在の向きとの差分を取得する
//=============================================================================
D3DXVECTOR3 CCharacter::GetDiffRot(void)
{
	return m_DiffRot;
}

//=============================================================================
//    重力を取得する
//=============================================================================
float CCharacter::GetGravity(void)
{
	return m_fGravity;
}

//=============================================================================
//    当たり判定を取る高さを取得する
//=============================================================================
float CCharacter::GetColHeight(void)
{
	return m_fColHeight;
}

//=============================================================================
//    当たり判定を取る範囲を取得する
//=============================================================================
float CCharacter::GetColRange(void)
{
	return m_fColRange;
}

//=============================================================================
//    前回乗っていたかどうかを取得する
//=============================================================================
bool CCharacter::GetLand(void)
{
	return m_bLand;
}

//=============================================================================
//    乗っているオブジェクトへのポインタを取得する
//=============================================================================
CScene *CCharacter::GetLandScene(void)
{
	return m_pLandScene;
}

//=============================================================================
//    乗っているオブジェクトとのオフセット距離を取得する
//=============================================================================
D3DXVECTOR3 CCharacter::GetLandOffsetPos(void)
{
	return m_LandOffsetPos;
}

//=============================================================================
//    オフセットに加える値を取得する
//=============================================================================
D3DXVECTOR3 CCharacter::GetLandOffsetAdd(void)
{
	return m_LandOffsetAdd;
}

//=============================================================================
//    乗っているオブジェクトとのオフセット向きを取得する
//=============================================================================
D3DXVECTOR3 CCharacter::GetLandOffsetRot(void)
{
	return m_LandOffsetRot;
}

//=============================================================================
//    乗ってからの向きを取得する
//=============================================================================
D3DXVECTOR3 CCharacter::GetLandOffsetRotStart(void)
{
	return m_LandOffsetRotStart;
}
